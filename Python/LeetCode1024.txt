____________________________________________________________________________________
36ms
class Solution:
    def videoStitching(self, clips: List[List[int]], T: int) -> int:
        result = 0
        bot, top = -1, 0
        while top < T:
            ls = [x[1] for x in clips if x[0] <= top and x[0] > bot]
            if len(ls) == 0:
                return -1
            bot, top = top, max(ls)
            result += 1
        
        return result
____________________________________________________________________________________
40ms
class Solution:
    def videoStitching(self, clips: List[List[int]], T: int) -> int:
        l = sorted(clips, key=lambda x: (x[0], -x[1])) 
        #sort asc for start, and desc for end points (secondary criterion)
        #print(clips)
        print(l)
        S,E = 0,1
        count = 0
        gained = 0 
        i = 0
        mx = 0
        while i < len(l):
            progress = False
            while i < len(l) and l[i][S] <= gained:
                progress = True
               # if l[i][E] >= T: 
               #     count +=1
               #     break
                mx = max(mx, l[i][E])       
                print (i, l[i], mx, gained)
                i+=1
             
            if progress: 
                count +=1 # count added segment            
                print("added count")
                gained = mx
                if mx >= T: return count  # fulfilled the exit condition
            else:
                i+=1
           # if i == len(l): return -1 # no progress, and reached the end
            


        return count if mx >= T else -1 
____________________________________________________________________________________
44ms
class Solution:
    def videoStitching(self, clips: List[List[int]], T: int) -> int:
        dp = [T+1]*(T+1)
        dp[0] = 0
        
        for i in range(1, T+1):
            for c in clips:
                if c[1] >= i and c[0] < T:
                    dp[i] = min(dp[c[0]]+1, dp[i])
        
        if dp[-1] == T+1:
            return -1
        else:
            return dp[-1]
____________________________________________________________________________________
48ms
class Solution:
    def videoStitching(self, clips: List[List[int]], T: int) -> int:
        clips.sort()
        ret, s = [], 0
        while s < T:
            tmp = [-1, -1]
            for clip in clips:
                if clip[0] > s:
                    break
                if not clip in ret and (clip[1]-s) > (tmp[1]-s):
                    tmp = clip
            if tmp == [-1, -1]:
                return -1
            ret.append(tmp)
            s = tmp[1]
        return len(ret)
____________________________________________________________________________________
52ms
class Solution:
    def videoStitching(self, clips: List[List[int]], T: int) -> int:
        no = len(clips)
        dp = [no+1]*(T+1)
        maxDist = [-1]*(101)
        for i in clips:
            maxDist[i[0]]=max(maxDist[i[0]],i[1])
        for i in range(1,101):
            maxDist[i]=max(maxDist[i],maxDist[i-1])
            if(maxDist[i]<=i):
                maxDist[i]=-1
        curr = 0
        total = 0
        while(curr<T):
            curr = maxDist[curr]
            total += 1
            if(curr==-1):
                break
        if(curr==-1):
            total = -1
        return total
____________________________________________________________________________________